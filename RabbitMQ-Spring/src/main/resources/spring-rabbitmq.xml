<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <description>Spring公共配置 </description>

    <!--配置connection-factory，指定连接rabbit server参数 -->
    <rabbit:connection-factory id="connectionFactory"
                               host="${rmq.ip}"
                               port="${rmq.port}"
                               username="${rmq.manager.user}"
                               password="${rmq.manager.password}"
                               publisher-returns="true" publisher-confirms="true" />

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin connection-factory="connectionFactory" />
    <!--定义rabbit template用于数据的接收和发送 -->
    <rabbit:template id="rabbitTemplate" exchange="my-direct-exchange"  connection-factory="connectionFactory"/>
    <!--定义queue
        说明：
        durable:是否持久化
        exclusive: 仅创建者可以使用的私有队列，断开后自动删除
        auto_delete: 当所有消费客户端连接断开后，是否自动删除队列
    -->
    <rabbit:queue name="mq.one" durable="true" auto-delete="false" exclusive="false" />
    <!-- 定义direct exchange，绑定queueTest -->
    <!-- 交换机定义 -->
    <!--
    交换机：一个交换机可以绑定多个队列，一个队列也可以绑定到多个交换机上。
    如果没有队列绑定到交换机上，则发送到该交换机上的信息则会丢失。

    direct模式:消息与一个特定的路由器完全匹配，才会转发
    topic模式:按规则转发消息，最灵活
    -->
    <!--定义direct-exchange -->
    <rabbit:direct-exchange name="my-direct-exchange" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="mq.one" key="mq.one.send" ></rabbit:binding>
        </rabbit:bindings>

    </rabbit:direct-exchange>
    <!-- 消息接收者 -->
    <bean id="consumerOne" class="com.jimmy.consumer.ConsumerOne"/>
    <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->
    <rabbit:listener-container connection-factory="connectionFactory" >
        <rabbit:listener  queues="mq.one"  ref="consumerOne"/>
    </rabbit:listener-container>

    <!--定义queue-->
    <rabbit:queue name="mq.two" durable="true" auto-delete="false" exclusive="false" />
    <rabbit:direct-exchange name="my-direct-exchange" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="mq.two" key="mq.two.send" ></rabbit:binding>
        </rabbit:bindings>

    </rabbit:direct-exchange>
    <!-- 消息接收者 -->
    <bean id="consumerTwo" class="com.jimmy.consumer.ConsumerTwo"/>

    <rabbit:listener-container connection-factory="connectionFactory" >
        <rabbit:listener  queues="mq.two"  ref="consumerTwo"/>
    </rabbit:listener-container>



    <!-- 分隔线 -->
    <!-- topic模式-->
    <rabbit:connection-factory id="connectionFactory2"
                               host="${rmq.ip}"
                               port="${rmq.port}"
                               username="${rmq.manager.user}"
                               password="${rmq.manager.password}"
                               publisher-returns="true" publisher-confirms="true" />
    <rabbit:admin id="connectAdmin2" connection-factory="connectionFactory2" />
    <!--定义queue-->
    <rabbit:queue name="mq.three" durable="true" auto-delete="false" exclusive="false" />
    <!-- 定义topic exchange，绑定queueTest -->
    <rabbit:topic-exchange name="my-topic-exchange" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="mq.three" pattern="mq.three.send.#" />
        </rabbit:bindings>

    </rabbit:topic-exchange>

    <rabbit:template id="rabbitTemplate2" exchange="my-topic-exchange"  connection-factory="connectionFactory2"/>

    <!-- 消息接收者 -->

    <bean id="consumerThree" class="com.jimmy.consumer.ConsumerThree"/>

    <rabbit:listener-container connection-factory="connectionFactory2" >
        <rabbit:listener  queues="mq.three"  ref="consumerThree"/>
    </rabbit:listener-container>


</beans>